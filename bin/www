#!/usr/bin/env node

/**
 * Module dependencies.
 */
const mongoose = require('mongoose');
const User = require('../models/user');

const { app, db } = require('../app');
const debug = require('debug')('nodetemplate:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = require('socket.io').listen(server);
io.on('connection', (socket) => {
  const chat = db.collection('chat');
  const users = db.collection('users');

  socket.on('needFriends', async (id) => {
    const currentUser = await User.findOne({_id: id});
    const friends = currentUser.friends;
    const friendsIds = friends.map(item => item.id);
    const friendsArr = await User.find({ _id: { $in: friendsIds } });
    const mappedFriends = friendsArr.map((item, i) => {
      return {
        _id: item._id,
        nickname: item.nickname,
        avatar: item.avatar,
        status: item.status,
        newMessages: item.newMessages,
        favorite: friends[i].favorite,
      }
    });
    socket.emit('gettingFriends', mappedFriends);
  });

  socket.on('manageFavorites', async (data) => {
    const { current, friend, checked } = data;
    await User.update(
      {'_id': current, 'friends.id': friend},
      {$set: {'friends.$.favorite': checked}}
    );
    socket.emit('favoritesManaged');
  });

  const findMessages = () => {
    chat.find().sort({ _id: -1 }).limit(20).toArray((err, result) => {
      if (err) {
        throw err;
      }

      socket.emit('gettingMessages', result.reverse());
    });
  }

  socket.on('needMessages', () => {
    findMessages();
  })

  socket.on('message sent', (data) => {
    const { author } = data;
    const { msg } = data;

    chat.insert({ author, msg }, () => {
      findMessages();
    });
  });

  socket.on('typing', (name) => {
    socket.broadcast.emit('someone-typing', name);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
